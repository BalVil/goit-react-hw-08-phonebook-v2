{"version":3,"file":"static/js/919.c6bd5667.chunk.js","mappings":"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","sources":["pages/LoginPage.js","hooks/useLogIn.js"],"sourcesContent":["import { Link as RouterLink } from 'react-router-dom';\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport Link from '@mui/material/Link';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { GoogleButton } from 'react-google-button';\nimport { useLogIn } from 'hooks/useLogIn';\n\nconst LoginPage = () => {\n  const {\n    register,\n    handleSubmit,\n    handleLogin,\n    handleGoogleSignIn,\n    logInValidation,\n    errors,\n  } = useLogIn();\n\n  return (\n    <Container\n      component=\"main\"\n      maxWidth=\"xs\"\n      sx={{\n        marginTop: 4,\n      }}\n    >\n      <Box\n        sx={{\n          padding: 4,\n          bgcolor: '#fff',\n          borderRadius: 2,\n          '&:hover': { boxShadow: 'rgb(0 0 0 / 20%) 0px 2px 4px;' },\n        }}\n      >\n        <CssBaseline />\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <Typography component=\"h1\" variant=\"h5\">\n            Log In\n          </Typography>\n\n          <Box\n            component=\"form\"\n            noValidate\n            onSubmit={handleSubmit(handleLogin)}\n            sx={{ mt: 3 }}\n            textAlign=\"center\"\n          >\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <TextField\n                  required\n                  type=\"email\"\n                  fullWidth\n                  id=\"email\"\n                  label=\"Email\"\n                  name=\"email\"\n                  autoComplete=\"email\"\n                  variant=\"standard\"\n                  {...register('email', logInValidation.email)}\n                  error={Boolean(errors.email)}\n                  helperText={errors?.email && errors.email.message}\n                />\n              </Grid>\n\n              <Grid item xs={12}>\n                <TextField\n                  required\n                  fullWidth\n                  name=\"password\"\n                  label=\"Password\"\n                  type=\"password\"\n                  id=\"password\"\n                  autoComplete=\"new-password\"\n                  variant=\"standard\"\n                  {...register('password', logInValidation.password)}\n                  error={Boolean(errors.password)}\n                  helperText={errors?.password && errors.password.message}\n                />\n              </Grid>\n            </Grid>\n\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              fullWidth\n              sx={{\n                mt: 3,\n                mb: 2,\n                bgcolor: '#32a5cf',\n                '&:hover, &:focus': { bgcolor: '#3e61a0' },\n              }}\n            >\n              Log in\n            </Button>\n\n            <Grid\n              container\n              justifyContent=\"center\"\n              sx={{\n                mt: 3,\n                mb: 1,\n              }}\n            >\n              <GoogleButton onClick={handleGoogleSignIn} />\n            </Grid>\n\n            <Grid container justifyContent=\"center\">\n              <Grid item>\n                <Link component={RouterLink} to=\"/register\" variant=\"body2\">\n                  Don't have an account? Sign Up\n                </Link>\n              </Grid>\n            </Grid>\n          </Box>\n        </Box>\n      </Box>\n    </Container>\n  );\n};\nexport default LoginPage;\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { authOperations } from '../redux/auth';\nimport { UserAuthGoogle } from 'context/AuthContextGoogle';\n\nexport const useLogIn = () => {\n  const dispatch = useDispatch();\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n  const { googleSignIn, user } = UserAuthGoogle();\n\n  const logInValidation = {\n    name: { required: 'Name is required' },\n    email: {\n      required: 'Email is required',\n      pattern: {\n        value:\n          //eslint-disable-next-line\n          /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n        message: 'Invalid email format',\n      },\n    },\n    password: {\n      required: 'Password is required',\n      minLength: {\n        value: 8,\n        message: 'Password must have at least 8 characters',\n      },\n    },\n  };\n\n  const handleLogin = ({ email, password }) =>\n    dispatch(authOperations.logIn({ email, password }));\n\n  const handleGoogleSignIn = async () => {\n    try {\n      await googleSignIn();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    if (user?.emailVerified) {\n      async function fetchData() {\n        dispatch(\n          authOperations.logIn({\n            email: user.email,\n            password: user.uid,\n          })\n        );\n      }\n      fetchData();\n    }\n  }, [dispatch, user]);\n\n  return {\n    register,\n    handleSubmit,\n    handleLogin,\n    handleGoogleSignIn,\n    logInValidation,\n    errors,\n  };\n};\n"],"names":["dispatch","useDispatch","useForm","register","handleSubmit","errors","formState","UserAuthGoogle","googleSignIn","user","handleGoogleSignIn","console","log","useEffect","emailVerified","fetchData","authOperations","email","password","uid","handleLogin","logInValidation","name","required","pattern","value","message","minLength","useLogIn","Container","component","maxWidth","sx","marginTop","Box","padding","bgcolor","borderRadius","boxShadow","CssBaseline","display","flexDirection","alignItems","Typography","variant","noValidate","onSubmit","mt","textAlign","Grid","container","spacing","item","xs","TextField","type","fullWidth","id","label","autoComplete","error","Boolean","helperText","Button","mb","justifyContent","onClick","Link","RouterLink","to"],"sourceRoot":""}