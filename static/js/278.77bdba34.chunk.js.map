{"version":3,"file":"static/js/278.77bdba34.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/Spinner/Spinner.styled.js","components/Spinner/Spinner.js","redux/contacts/ContactsSelectors.js","components/ContactForm/ContactForm.jsx","hooks/useAddContact.js","components/ContactItem/ContactItem.styled.js","components/Modal/Modal.styled.js","components/ContactEditor/ContactEditor.js","hooks/useContactEditor.js","components/Modal/Modal.jsx","components/ContactItem/ContactItem.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","hooks/useContactList.js","pages/ContactsPage.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Button } from '@mui/material';\n\nexport const FormSection = styled.section`\n  margin-top: 48px;\n  text-align: center;\n\n  @media screen and (min-width: 720px) {\n    margin-top: 80px;\n  }\n`;\n\nexport const Title = styled.h1`\n  margin-bottom: 24px;\n  font-size: 36px;\n`;\n\nexport const FormWrap = styled.div`\n  max-width: 380px;\n  margin: 0 auto;\n  padding: 0 12px;\n\n  @media screen and (min-width: 450px) {\n    max-width: 420px;\n  }\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px 8px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  box-shadow: rgba(0, 0, 0, 0.2) 0px 2px 3px;\n`;\n\nexport const TextField = styled.div`\n  position: relative;\n  margin-bottom: 1rem;\n`;\n\nexport const Label = styled.label`\n  display: block;\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  margin-bottom: 0.25rem;\n  padding: 1rem 0.75rem;\n  color: rgba(0, 0, 0, 0.5);\n  pointer-events: none;\n  border: 1px solid transparent;\n  transform-origin: 0 0;\n  transition: opacity 0.15s ease-in-out, transform 0.15s ease-in-out;\n`;\n\nexport const Input = styled.input`\n  display: block;\n  height: calc(3.5rem + 2px);\n  width: 100%;\n  margin-bottom: 8px;\n  padding: 1rem 0.75rem;\n  line-height: 1.25;\n  color: #212529;\n  background-clip: padding-box;\n  border: 1px solid #bdbdbd;\n  border-radius: 0.25rem;\n  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n  appearance: none;\n\n  &::placeholder {\n    color: transparent;\n  }\n\n  &:focus {\n    color: #212529;\n    background-color: rgba(0, 0, 0, 0.03);\n    border-color: #bdbdbd;\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(158, 158, 158, 0.25);\n\n    padding-top: 1.625rem;\n    padding-bottom: 0.625rem;\n  }\n\n  &:not(:placeholder-shown) {\n    padding-top: 1.625rem;\n    padding-bottom: 0.625rem;\n  }\n\n  &:focus + ${Label} {\n    opacity: 0.75;\n    transform: scale(0.85) translateY(-0.75rem) translateX(0.15rem);\n  }\n  &:not(:placeholder-shown) + ${Label} {\n    opacity: 0.75;\n    transform: scale(0.85) translateY(-0.75rem) translateX(0.15rem);\n  }\n`;\n\nexport const FormButton = styled(Button)`\n  box-shadow: rgb(0 0 0 / 20%) 0px 3px 1px -2px,\n    rgb(0 0 0 / 14%) 0px 2px 2px 0px, rgb(0 0 0 / 12%) 0px 1px 5px 0px;\n\n  &:focus {\n    outline: 1px solid #1e90ff;\n  }\n  &:active {\n    outline: none;\n    background-color: #1e90ff;\n  }\n`;\n","import { CgSpinner } from 'react-icons/cg';\nimport styled from '@emotion/styled';\nimport { keyframes } from '@emotion/css';\n\nexport const SpinWrap = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst spin = keyframes`\n0% {\n  transform: rotate(0deg);\n}\n100% {\n  transform: rotate(1turn);\n}\n`;\n\nexport const Spin = styled(CgSpinner)`\n  animation: ${spin} 0.85s linear infinite;\n`;\n\nSpin.defaultProps = {\n  size: 40,\n};\n","import { SpinWrap, Spin } from './Spinner.styled';\n\nconst Spinner = ({ size }) => {\n  return (\n    <SpinWrap>\n      <Spin size={size} />\n    </SpinWrap>\n  );\n};\nexport default Spinner;\n","export const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n","import { Controller } from 'react-hook-form';\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport { FormSection, Title, FormWrap } from './ContactForm.styled';\n\nimport Spinner from 'components/Spinner';\nimport { useAddContact } from 'hooks/useAddContact';\n\nconst ContactForm = () => {\n  const {\n    register,\n    errors,\n    control,\n    isLoading,\n    handleSubmit,\n    handleAddContact,\n    contactValidation,\n  } = useAddContact();\n\n  return (\n    <FormSection>\n      <Title>Phonebook</Title>\n      <FormWrap>\n        <Box\n          sx={{\n            padding: 4,\n            bgcolor: '#fff',\n            borderRadius: 2,\n            boxShadow: 'rgb(0 0 0 / 20%) 0px 2px 4px',\n          }}\n        >\n          <CssBaseline />\n          <Box\n            sx={{\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n            }}\n          >\n            <Box\n              component=\"form\"\n              noValidate\n              autoComplete=\"off\"\n              onSubmit={handleSubmit(handleAddContact)}\n              textAlign=\"center\"\n            >\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <Controller\n                    control={control}\n                    name=\"name\"\n                    render={({ field: { ref, ...field } }) => (\n                      <TextField\n                        {...field}\n                        inputRef={ref}\n                        type=\"text\"\n                        name=\"name\"\n                        fullWidth\n                        id=\"name\"\n                        label=\"Name\"\n                        variant=\"standard\"\n                        {...register('name', contactValidation.name)}\n                        error={Boolean(errors.name)}\n                        helperText={errors?.name && errors.name.message}\n                        required\n                      />\n                    )}\n                  />\n                </Grid>\n\n                <Grid item xs={12}>\n                  <Controller\n                    control={control}\n                    name=\"number\"\n                    render={({ field: { ref, ...field } }) => (\n                      <TextField\n                        {...field}\n                        inputRef={ref}\n                        fullWidth\n                        name=\"number\"\n                        label=\"Phone\"\n                        type=\"tel\"\n                        id=\"number\"\n                        variant=\"standard\"\n                        {...register('number', contactValidation.number)}\n                        error={Boolean(errors.number)}\n                        helperText={errors?.number && errors.number.message}\n                        required\n                      />\n                    )}\n                  />\n                </Grid>\n              </Grid>\n\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                fullWidth\n                disabled={isLoading === 'add'}\n                sx={{\n                  mt: 5,\n                  bgcolor: '#32a5cf',\n                }}\n              >\n                {isLoading === 'add' ? (\n                  <Spinner size={22} />\n                ) : (\n                  <span>Add contact</span>\n                )}\n              </Button>\n            </Box>\n          </Box>\n        </Box>\n      </FormWrap>\n    </FormSection>\n  );\n};\n\nexport default ContactForm;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { contactsActions } from 'redux/contacts/contactsSlice';\nimport { getContacts, getIsLoading } from 'redux/contacts/ContactsSelectors';\nimport { showWarning, showSuccess } from 'components/Notification/Notification';\n\nexport const useAddContact = () => {\n  const items = useSelector(getContacts);\n  const isLoading = useSelector(getIsLoading);\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n    control,\n  } = useForm({ defaultValues: { name: '', number: '' } });\n\n  const contactValidation = {\n    name: {\n      required: 'Name is required',\n      maxLength: 50,\n      pattern: {\n        value:\n          /^[a-zA-Zа-яА-Я0-9]+(([' -][a-zA-Zа-яА-Я0-9 ])?[a-zA-Zа-яА-Я0-9]*)*$/,\n        message: 'Invalid name format',\n      },\n    },\n    number: {\n      required: 'Number is required',\n      pattern: {\n        value: /^[0-9]+$/,\n        message: 'This is not a valid mobile phone',\n      },\n      minLength: {\n        value: 6,\n        message: 'This number is too short',\n      },\n      maxLength: {\n        value: 14,\n        message: 'This number is too long',\n      },\n    },\n  };\n\n  const handleAddContact = data => {\n    const sameName =\n      items.findIndex(\n        item => item.name.toLowerCase() === data.name.toLowerCase()\n      ) !== -1;\n\n    if (sameName) {\n      showWarning(`${data.name} is already in contacts `);\n      return;\n    }\n\n    dispatch(contactsActions.addContact(data));\n  };\n\n  useEffect(() => {\n    if (isLoading === 'addSuccess') {\n      showSuccess('Contact added');\n      reset();\n      dispatch(contactsActions.setIsLoading());\n    }\n  }, [dispatch, isLoading, reset]);\n\n  return {\n    register,\n    errors,\n    control,\n    isLoading,\n    handleSubmit,\n    handleAddContact,\n    contactValidation,\n  };\n};\n","import styled from '@emotion/styled';\n\nexport const Contact = styled.li`\n  position: relative;\n  display: flex;\n  align-items: center;\n  margin-bottom: 8px;\n  padding: 12px 8px;\n  line-height: 1.4em;\n  border-radius: 4px;\n  box-shadow: rgb(0 0 0 / 20%) 0px 3px 1px -2px,\n    rgb(0 0 0 / 14%) 0px 2px 2px 0px, rgb(0 0 0 / 12%) 0px 1px 5px 0px;\n`;\n\nexport const ContactName = styled.span`\n  flex-basis: 50%;\n  font-weight: 600;\n  overflow-wrap: break-word;\n`;\n\nexport const ContactNumber = styled.span`\n  max-width: 35%;\n  overflow-wrap: break-word;\n`;\n","import styled from '@emotion/styled';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.5);\n`;\n","import Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport { useContactEditor } from 'hooks/useContactEditor';\n\nconst ContactEditor = ({ id, onClose }) => {\n  const { inputs, handleSubmit, handleChange } = useContactEditor({\n    id,\n    onClose,\n  });\n\n  return (\n    <Box\n      padding={{ xs: 3 }}\n      sx={{\n        bgcolor: '#fff',\n        borderRadius: 2,\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n      }}\n    >\n      <Typography\n        component=\"h2\"\n        variant=\"h6\"\n        sx={{\n          textAlign: 'center',\n          marginBottom: 2,\n        }}\n      >\n        Edit contact\n      </Typography>\n\n      <Box component=\"form\" textAlign=\"center\" onSubmit={handleSubmit}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <TextField\n              required\n              type=\"text\"\n              fullWidth\n              id=\"name\"\n              label=\"Name\"\n              name=\"name\"\n              onChange={handleChange}\n              value={inputs.name}\n              variant=\"standard\"\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <TextField\n              required\n              type=\"tel\"\n              fullWidth\n              id=\"number\"\n              label=\"Number\"\n              name=\"number\"\n              onChange={handleChange}\n              value={inputs.number}\n              variant=\"standard\"\n              onKeyPress={e => !/[0-9]/.test(e.key) && e.preventDefault()}\n            />\n          </Grid>\n        </Grid>\n\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          fullWidth\n          sx={{ mt: 3, bgcolor: '#32a5cf' }}\n        >\n          Confirm\n        </Button>\n      </Box>\n    </Box>\n  );\n};\nexport default ContactEditor;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/contacts/ContactsSelectors';\nimport { showWarning } from 'components/Notification/Notification';\nimport { contactsActions } from 'redux/contacts/contactsSlice';\n\nexport const useContactEditor = ({ id, onClose }) => {\n  const dispatch = useDispatch();\n  const items = useSelector(getContacts);\n\n  const { name, number } = items.find(item => item.id === id);\n  const [inputs, setInputs] = useState({ name, number });\n\n  const prevName = items.reduce((acc, contact) => {\n    if (contact.id === id) {\n      acc = contact.name;\n    }\n    return acc;\n  }, {});\n\n  const handleChange = e => {\n    const nameInput = e.target.name;\n    const value = e.target.value;\n    setInputs(values => ({ ...values, [nameInput]: value }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // має перевіряти бекенд\n    const sameName =\n      items.findIndex(\n        item => item.name.toLowerCase() === inputs.name.toLowerCase()\n      ) !== -1;\n\n    if (sameName && prevName !== inputs.name) {\n      showWarning(`${inputs.name} is already in contacts `);\n      return;\n    }\n\n    const isContactChanged =\n      inputs.name.trim() !== name || inputs.number !== number;\n\n    if (isContactChanged) {\n      dispatch(\n        contactsActions.editContact({\n          id,\n          ...inputs,\n        })\n      );\n    }\n\n    onClose();\n  };\n\n  return { inputs, handleSubmit, handleChange };\n};\n","import { createPortal } from 'react-dom';\nimport { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Overlay } from './Modal.styled';\nimport ContactEditor from 'components/ContactEditor/ContactEditor';\n\nconst EditContactModal = ({ onClose, id }) => {\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Escape') {\n        onClose();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [onClose]);\n\n  const handleOverlayClick = e => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n\n  return createPortal(\n    <Overlay onClick={handleOverlayClick}>\n      <ContactEditor id={id} onClose={onClose} />\n    </Overlay>,\n    document.querySelector('#modal-root')\n  );\n};\nexport default EditContactModal;\n\nEditContactModal.propTypes = {\n  id: PropTypes.string.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ModeEditIcon from '@mui/icons-material/ModeEdit';\nimport IconButton from '@mui/material/IconButton';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { Contact, ContactName, ContactNumber } from './ContactItem.styled';\nimport * as contactsOperations from 'redux/contacts/contactsOperations';\nimport { getIsLoading } from 'redux/contacts/ContactsSelectors';\nimport { showWarning } from 'components/Notification/Notification';\nimport EditContactModal from 'components/Modal';\nimport { contactsActions } from 'redux/contacts/contactsSlice';\n\nconst ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const toggleModal = () => setIsModalOpen(state => !state);\n\n  const handleDeleteContact = contactId => {\n    dispatch(contactsOperations.deleteContact(contactId));\n  };\n\n  useEffect(() => {\n    return () => {\n      if (isLoading === id) {\n        showWarning(`You have removed ${name} from your list `);\n        dispatch(contactsActions.setIsLoading());\n      }\n    };\n  }, [dispatch, id, isLoading, name]);\n\n  return (\n    <Contact>\n      <ContactName>{name}:</ContactName>\n      <ContactNumber>{number}</ContactNumber>\n      <IconButton\n        sx={{\n          position: 'absolute',\n          right: '15%',\n          '&:hover, &:focus': { bgcolor: '#d7f0d0', color: '#468d46' },\n        }}\n        aria-label=\"edit\"\n        type=\"button\"\n        onClick={toggleModal}\n      >\n        <ModeEditIcon />\n      </IconButton>\n      <IconButton\n        sx={{\n          position: 'absolute',\n          right: '2%',\n          '&:hover, &:focus': { bgcolor: '#f3dacf', color: '#d31616' },\n        }}\n        aria-label=\"delete\"\n        type=\"button\"\n        disabled={isLoading === id}\n        loading={isLoading === id ? 1 : 0}\n        onClick={() => handleDeleteContact(id)}\n      >\n        <DeleteIcon />\n      </IconButton>\n      {isModalOpen && <EditContactModal onClose={toggleModal} id={id} />}\n    </Contact>\n  );\n};\nexport default ContactItem;\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\nimport { DebounceInput } from 'react-debounce-input';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 16px;\n  margin-bottom: 16px;\n`;\n\nexport const LabelTitle = styled.p`\n  margin-bottom: 2px;\n  color: rgba(0, 0, 0, 0.54);\n`;\n\nexport const FilterInput = styled(DebounceInput)`\n  display: block;\n  height: calc(2.5rem + 2px);\n  width: 70%;\n  margin-bottom: 8px;\n  padding: 1rem 0.75rem;\n  font-size: 1.1rem;\n  line-height: 1.25;\n  color: #212529;\n  background-clip: padding-box;\n  border: 1px solid #bdbdbd;\n  border-radius: 0.25rem;\n  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n  appearance: none;\n\n  &:focus {\n    background-color: rgba(0, 0, 0, 0.03);\n    border-color: #bdbdbd;\n    outline: 0;\n    box-shadow: 0 0 0 0.1rem rgba(158, 158, 158, 0.25);\n  }\n`;\n","import { Label, LabelTitle, FilterInput } from './Filter.styled';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <Label>\n      <LabelTitle>Find contacts by name</LabelTitle>\n      <FilterInput\n        debounceTimeout={300}\n        type=\"text\"\n        value={value}\n        onChange={e => onChange(e.target.value)}\n        name=\"filter\"\n      />\n    </Label>\n  );\n};\nexport default Filter;\n","import styled from '@emotion/styled';\n\nexport const ListSection = styled.section`\n  margin-top: 48px;\n  text-align: center;\n\n  @media screen and (min-width: 720px) {\n    margin-top: 60px;\n  }\n`;\nexport const ListWrap = styled.div`\n  max-width: 380px;\n  margin: 0 auto;\n  padding: 0 12px;\n\n  @media screen and (min-width: 450px) {\n    max-width: 580px;\n    padding: 0 24px;\n  }\n`;\n","import { useSelector } from 'react-redux';\nimport ContactItem from 'components/ContactItem';\nimport { useContactList } from 'hooks/useContactList';\nimport { getIsLoading } from 'redux/contacts/ContactsSelectors';\nimport { Notification } from 'components/Notification/Notification';\nimport Filter from 'components/Filter';\nimport { SkeletonContacts } from 'components/Skeleton/Skeleton';\nimport { ListSection, ListWrap } from './ContactList.styled';\n\nconst ContactList = () => {\n  const { FilteredContacts, filter, setFilter } = useContactList();\n  const isLoading = useSelector(getIsLoading);\n\n  const noContactFound = FilteredContacts.length === 0 && isLoading !== 'fetch';\n\n  return (\n    <ListSection>\n      <h2>Contacts</h2>\n      <ListWrap>\n        {isLoading === 'fetch' ? (\n          <SkeletonContacts />\n        ) : (\n          <>\n            <Filter value={filter} onChange={setFilter} />\n            <ul>\n              {FilteredContacts.length > 0 &&\n                FilteredContacts.map(({ id, name, number }) => {\n                  return (\n                    <ContactItem\n                      key={id}\n                      name={name}\n                      number={number}\n                      id={id}\n                    ></ContactItem>\n                  );\n                })}\n            </ul>\n          </>\n        )}\n        {noContactFound && (\n          <Notification status=\"warning\">No contacts found</Notification>\n        )}\n      </ListWrap>\n    </ListSection>\n  );\n};\nexport default ContactList;\n","import { useEffect, useMemo, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  getContacts,\n  getIsLoading,\n  getError,\n} from 'redux/contacts/ContactsSelectors';\nimport * as contactsOperations from 'redux/contacts/contactsOperations';\nimport { showSuccess, showError } from 'components/Notification/Notification';\nimport { contactsActions } from 'redux/contacts/contactsSlice';\n\nexport const useContactList = () => {\n  const [filter, setFilter] = useState('');\n  const items = useSelector(getContacts);\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(contactsOperations.getContacts());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (isLoading === 'editSuccess') {\n      showSuccess(`Successfully changed`);\n      dispatch(contactsActions.setIsLoading());\n    }\n    if (error) {\n      showError('Oops, something went wrong. Please try again');\n    }\n  }, [dispatch, isLoading, error]);\n\n  const FilteredContacts = useMemo(() => {\n    const normalizedFilter = filter.toLowerCase().trim();\n\n    return items.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  }, [filter, items]);\n\n  return { FilteredContacts, filter, setFilter };\n};\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\n\nconst Contacts = () => {\n  return (\n    <div>\n      <ContactForm />\n      <ContactList />\n    </div>\n  );\n};\nexport default Contacts;\n"],"names":["FormSection","styled","Title","FormWrap","Label","Button","SpinWrap","spin","keyframes","Spin","CgSpinner","defaultProps","size","getContacts","state","contacts","items","getIsLoading","isLoading","getError","error","useSelector","dispatch","useDispatch","useForm","defaultValues","name","number","register","handleSubmit","errors","formState","reset","control","useEffect","showSuccess","contactsActions","handleAddContact","data","findIndex","item","toLowerCase","showWarning","contactValidation","required","maxLength","pattern","value","message","minLength","useAddContact","Box","sx","padding","bgcolor","borderRadius","boxShadow","CssBaseline","display","flexDirection","alignItems","component","noValidate","autoComplete","onSubmit","textAlign","Grid","container","spacing","xs","render","field","ref","TextField","inputRef","type","fullWidth","id","label","variant","Boolean","helperText","disabled","mt","Contact","ContactName","ContactNumber","Overlay","onClose","find","useState","inputs","setInputs","prevName","reduce","acc","contact","e","preventDefault","trim","handleChange","nameInput","target","values","useContactEditor","position","top","left","transform","Typography","marginBottom","onChange","onKeyPress","test","key","handleKeyDown","code","window","addEventListener","removeEventListener","createPortal","onClick","currentTarget","document","querySelector","isModalOpen","setIsModalOpen","toggleModal","IconButton","right","color","ModeEdit","loading","contactId","contactsOperations","Delete","LabelTitle","FilterInput","DebounceInput","debounceTimeout","ListSection","ListWrap","filter","setFilter","showError","FilteredContacts","useMemo","normalizedFilter","includes","useContactList","noContactFound","length","Skeleton","map","Notification","status"],"sourceRoot":""}